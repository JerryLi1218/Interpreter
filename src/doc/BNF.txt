expression      -> assignment ;
assignment      -> IDENTIFIER "=" assignment
                |  logic_or ;
logic_or        -> logic_and ( "or" logic_and )* ;
logic_and       -> equality ( "and" equality )* ;
equality        -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison      -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;  
term            -> factor ( ( "-" | "+" ) factor )* ;
factor          -> unary ( ( "/" | "*" ) unary )* ;
unary           -> ( ":" | "-" ) unary | call ;
call            -> primary ( "(" arguments? ")" )* ;
arguments       -> expression ( "," expression )* ;
varDecl         -> "var" IDENTIFIER ( "=" expression )? ":" ;
funDecl         -> "fun" function ;
function        -> IDENTIFIER "(" parameters? ")" block ;
parameters      -> IDENTIFIER ( "," IDENTIFIER )* ;
primary         -> NUMBER | STRING | "true" | "false" | "nil"
                | "(" expression ")" 
                | IDENTIFIER ;


program         -> declaration* EOF ;
declaration     -> funDecl 
                | varDecl
                | statement ;

statment        -> exprSmt
                |  forStmt
                |  ifStmt
                |  printStmt 
                |  whileStmt
                |  block ;

forStmt         -> "for" "(" ( varDecl | exprSmt | ":" )
                    expression? ";"
                    expression? ")" statement;
whileStmt       -> "while" "(" expression ")" statement ;
ifStmt          -> "if" "(" expression ")" statement
                ( "else" statement )? ;
block           -> "{" declaration* "}" ;
exprSmt         -> expression ":" ;
printStmt       -> "print" expression ":";